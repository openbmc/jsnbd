{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ec0f1958_5c1765ad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1000460
      },
      "writtenOn": "2023-01-30T15:47:40Z",
      "side": 1,
      "message": "Hi,\nCould you please take a look at the updated patches? \n- logger switched to phosphor-logging (but with wrapper)\n- UT added",
      "revId": "5593ce802b5bc009ec7839530050aec8a21c76eb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "890a7de4_422b4a62",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2023-01-31T06:18:33Z",
      "side": 1,
      "message": "Hi Przemyslaw,\n\nThanks for the continued work on this. As I mentioned above, I\u0027m okay with switching over to  new infrastructure, as long as you\u0027re okay with taking on maintenance.\n\nA couple of overall notes:\n\n - I\u0027m a little confused to the references to \"legacy mode\"; why is this legacy? Users may not have the context about what is legacy and what isn\u0027t, and the existing nbd code doesn\u0027t implement it anyway (what is it a legacy from?). Perhaps something more descriptive would be useful here, like \"client mode\" vs \"browser mode\" ?\n \n - There seems to be a bit of confusion around build infrastructure: you\u0027re using meson, but the bootstrap.sh references an autotools build, and the README references a CMake build.",
      "revId": "5593ce802b5bc009ec7839530050aec8a21c76eb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d63f7e0_bda79385",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1000460
      },
      "writtenOn": "2023-01-31T14:34:16Z",
      "side": 1,
      "message": "Sure, I will take the maintenance after those patches will be accepted. \n\nRegarding the naming scheme, those are proposed just to distinguish. Legacy means that it follows assumptions of Virtual Media schema of redfish. This could be named as URL based (or similarly). For me Legacy sounds OK, origin is also covered by the design papers. \nFor proxy, the name is self-descriptive as BMC works as proxy between nbd server provided by user and host.\n\nFor the bootstrap.sh file (and other autotool files) - for the time by all patches defining a new service will be accepted, both implementations must co-exist. That\u0027s why I left all old files. They will be removed by the last patch in the series, right after OpenBMC Yocto recipes will enable the new solution. This is a consequence of the decision to reuse jsnbd repository.\n\nAnd last (but no least) - references to CMake are leftovers from the transition to meson from CMake used initially by the project. I have removed them in the next version of patches.",
      "parentUuid": "890a7de4_422b4a62",
      "revId": "5593ce802b5bc009ec7839530050aec8a21c76eb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed343c55_987d2ac0",
        "filename": "meson.build",
        "patchSetId": 19
      },
      "lineNbr": 150,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-02-15T17:57:41Z",
      "side": 1,
      "message": "nit, tabs.\n\nNon nit.  Most of these boost modules are explicitly disallowed by the coding standard due to impacts they have on the quality of the output binary.  coroutine is allowed, but there are c++ std replacements for the other ones.\n\niostreams -\u003e use std::iostreams, or ideally avoid streams altogether.\nfilesystem -\u003e use std::filesystem\nprogram_options -\u003e use CLI11\nregex -\u003e use std::regex, or replace with basic state machines\nsystem -\u003e Set BOOST_SYSTEM_NO_DEPRECATED",
      "range": {
        "startLine": 150,
        "startChar": 0,
        "endLine": 150,
        "endChar": 3
      },
      "revId": "5593ce802b5bc009ec7839530050aec8a21c76eb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5a6a1e0_f9076781",
        "filename": "tests/res/copy_to_tmp.py",
        "patchSetId": 19
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-02-15T17:58:20Z",
      "side": 1,
      "message": "This doesn\u0027t seem like a script we would want here?",
      "revId": "5593ce802b5bc009ec7839530050aec8a21c76eb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8554e51_253f34a7",
        "filename": "tests/res/copy_to_tmp.py",
        "patchSetId": 19
      },
      "lineNbr": 13,
      "author": {
        "id": 1001329
      },
      "writtenOn": "2023-02-16T10:03:10Z",
      "side": 1,
      "message": "The purpose of this script is to copy different configuration files to \u0027/tmp\u0027 for unit test purposes. If You take a look at \u0027configuration_test.cpp\u0027, You\u0027ll notice that tests load different configuration variants from \u0027/tmp\u0027 directory.",
      "parentUuid": "d5a6a1e0_f9076781",
      "revId": "5593ce802b5bc009ec7839530050aec8a21c76eb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fe5800f_83af6996",
        "filename": "tests/res/copy_to_tmp.py",
        "patchSetId": 19
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-01-05T16:59:59Z",
      "side": 1,
      "message": "I\u0027ve put up https://gerrit.openbmc.org/c/openbmc/jsnbd/+/68605/1 for what I think the fix should be.  It is simpler, and completely drops the python requirement, script, and doesn\u0027t rely on /tmp at all (which might conflict if multiple tests are run at once on the same machine).",
      "parentUuid": "d8554e51_253f34a7",
      "revId": "5593ce802b5bc009ec7839530050aec8a21c76eb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5da07bdc_37652530",
        "filename": "tests/res/copy_to_tmp.py",
        "patchSetId": 19
      },
      "lineNbr": 13,
      "author": {
        "id": 1001329
      },
      "writtenOn": "2024-01-08T15:00:45Z",
      "side": 1,
      "message": "I\u0027ll use this fix here, thank You!",
      "parentUuid": "3fe5800f_83af6996",
      "revId": "5593ce802b5bc009ec7839530050aec8a21c76eb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}