{
  "comments": [
    {
      "key": {
        "uuid": "0cbbb69d_0658aba0",
        "filename": "CMakeLists.txt",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "Can we do Meson please?  New code is expected to be in meson.",
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac4c6f35_4bc8a747",
        "filename": "OWNERS",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "I would prefer we do this as a separate commit at the end, once the review of this new feature is complete.  I don\u0027t want this repository to simply turn into another playground without review.",
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9665e65e_4896a521",
        "filename": "src/configuration.hpp",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "I don\u0027t see anything here that uses boost/chrono.  Did I miss something?",
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcd85775_3c6e8949",
        "filename": "src/configuration.hpp",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "You could make this simply:\n\nreturn { \"-t\", timeout, \"-u\", ... };\n\nDRY it up by avoiding repeating yourself on the return type and more likely for the compiler to use RVO to avoid a copy.",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 54,
        "endChar": 24
      },
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6da2f25_807e7114",
        "filename": "src/configuration.hpp",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "Do you want this or std::optional\u003cconst MountPoint\u0026\u003e?  Having to deal with the nullptr is more error prone than something which is obviously nullable.",
      "range": {
        "startLine": 58,
        "startChar": 4,
        "endLine": 58,
        "endChar": 21
      },
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a712b75f_fcef3048",
        "filename": "src/configuration.hpp",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "Can we just use std::map or std::unordered_map?  I really don\u0027t think there is as much advantage of using boost::..::flat_map as often as people attempt to use it.",
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12f79a96_c96697c4",
        "filename": "src/configuration.hpp",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "Do you want to simply catch all exceptions?  Why these two specifically?  Seems error prone in maintenance. \n\nShouldn\u0027t you log e.what() somewhere?",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 103,
        "endChar": 9
      },
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b217c2a_de2419f5",
        "filename": "src/configuration.hpp",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "Can you simplify all this with:\n\nauto value \u003d nbdDeviceIter-\u003eget_ref\u003cconst std::string\u0026\u003e();\n\n1. Prefer references over pointers.\n2. The typename of value is obvious from get_ref, so DRY.",
      "range": {
        "startLine": 127,
        "startChar": 0,
        "endLine": 128,
        "endChar": 50
      },
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "313dd7f9_8d10b06f",
        "filename": "src/configuration.hpp",
        "patchSetId": 1
      },
      "lineNbr": 130,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "I don\u0027t think this is possible, is it?\n\nOr, should you be checking nbdDeviceIter-\u003eis_string() somewhere?",
      "range": {
        "startLine": 129,
        "startChar": 0,
        "endLine": 130,
        "endChar": 25
      },
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27ae56fb_b36df7a3",
        "filename": "src/configuration.hpp",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "Why are you having the constructor take a C-string if the only caller of it has a \u0027const std::string\u0026\u0027?  Defer conversion to C-strings as late as possible in C++ code.",
      "range": {
        "startLine": 131,
        "startChar": 43,
        "endLine": 131,
        "endChar": 69
      },
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a57e029c_f28a2b74",
        "filename": "src/configuration.hpp",
        "patchSetId": 1
      },
      "lineNbr": 132,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "This is fairly non-obvious to me.  Having a struct cast to bool to indicate \"invalid parsing\".",
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a684507_7e21b24f",
        "filename": "src/configuration.hpp",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "I really dislike this nested logic pattern.  There is simply too much logic in this code and it will only get worse as people add new configuration parameters.  Can you, at a minimum, decrease the nesting on all of these using something like:\n\n  if (!value)\n  {\n      LogMsg(...);\n      continue;\n  }\n\n  // real logic.",
      "range": {
        "startLine": 139,
        "startChar": 0,
        "endLine": 144,
        "endChar": 25
      },
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2420f971_b9292d6b",
        "filename": "src/configuration.hpp",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "?",
      "range": {
        "startLine": 145,
        "startChar": 21,
        "endLine": 145,
        "endChar": 22
      },
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f583716a_ec19e6db",
        "filename": "src/configuration.hpp",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "It looks like you have this pattern a LOT in the configuration.  Can you simplify with a function to do it?\n\ntemplate\u003ctypename T, bool required \u003d true\u003e\nbool getConfig(const std::string_view key, T\u0026 value);\n\nif (!getConfig(\"UnixSocket\", mp.unixSocket))\n{\n   LogMsg(...);\n   continue;\n}",
      "range": {
        "startLine": 146,
        "startChar": 0,
        "endLine": 162,
        "endChar": 21
      },
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2342f224_43c2a6f4",
        "filename": "src/configuration.hpp",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "switch-case?",
      "range": {
        "startLine": 218,
        "startChar": 0,
        "endLine": 233,
        "endChar": 29
      },
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be864d98_43485be5",
        "filename": "src/configuration.hpp",
        "patchSetId": 1
      },
      "lineNbr": 248,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "mountPoints.emplace(mountpoint.key(), std::move(mp));",
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac75b1fb_c4627df0",
        "filename": "src/logger.hpp",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "Please use phosphor-logging::lg2 and not make up your own logger.",
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f972e656_62712f5a",
        "filename": "src/main.cpp",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "In what contexts is this used?  I would have guessed test cases, but this is main.cpp.",
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf8d13ae_1c71eaf4",
        "filename": "src/main.cpp",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "server::manager_t",
      "range": {
        "startLine": 30,
        "startChar": 49,
        "endLine": 30,
        "endChar": 73
      },
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae4ca469_e494f72b",
        "filename": "src/main.cpp",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "I prefer /etc/virtual-media/config.json instead of more files cluttering the root.",
      "range": {
        "startLine": 44,
        "startChar": 31,
        "endLine": 44,
        "endChar": 49
      },
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3befceb_dcbcb731",
        "filename": "src/main.cpp",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "This doesn\u0027t seem obviously connected to virtual-media.  Someone\u0027s just going to see a random /tmp/sock directory?",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 55,
        "endChar": 61
      },
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3df72c7_26892084",
        "filename": "src/main.cpp",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "In what contexts is this used?",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 76,
        "endChar": 6
      },
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50a1367b_65303cd0",
        "filename": "src/main.cpp",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "Any reason you\u0027re not using the sdbusplus code here?",
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7079abd_96ef5606",
        "filename": "src/system.hpp",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "\"I want to type less\" is kind of a lousy reason to avoid C++ features.",
      "range": {
        "startLine": 20,
        "startChar": 25,
        "endLine": 21,
        "endChar": 51
      },
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4ece81e_e25bd73b",
        "filename": "src/system.hpp",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "It isn\u0027t obvious to me when a static (compile-time) reference to a particular nbd name is useful.  Can you elaborate?  It seems like this class should always take a string-like and check it against /dev for presence.  Why should we need to modify anything if we wanted to support more or less nbd channels?",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 35,
        "endChar": 6
      },
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7ac1070_147206d1",
        "filename": "src/system.hpp",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "As mentioned above, it isn\u0027t obvious to me why we want to do this search operation.",
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e19e43b_f1c1e3b5",
        "filename": "src/system.hpp",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "Prefer to use range-find whenever possible now.\n\nstd::range:find(nameMatching, nbdName);",
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b47d7dd_d2d1ba38",
        "filename": "src/system.hpp",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "std::end(nameMatching) \n\n(or cend if you really prefer, but generally the compiler will simply do the right thing anyhow)",
      "range": {
        "startLine": 45,
        "startChar": 24,
        "endLine": 45,
        "endChar": 43
      },
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3e55340_042f19d2",
        "filename": "src/system.hpp",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "Please use spaceship operator.",
      "range": {
        "startLine": 58,
        "startChar": 0,
        "endLine": 69,
        "endChar": 5
      },
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68e26e83_1c9b9d72",
        "filename": "src/system.hpp",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "This sounds expensive.  Can we simply check for dev node presence?  Maybe we\u0027re doing it infrequently enough that it doesn\u0027t matter.",
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1cf9ef93_5cf14062",
        "filename": "src/system.hpp",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "This is all the more reason why I don\u0027t understand why you want to store as an enum and do this conversion back and forth all the time.",
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbf1e6f2_bcdb3788",
        "filename": "src/system.hpp",
        "patchSetId": 1
      },
      "lineNbr": 137,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "If you\u0027re going to have this it should probably be a \u0027static constexpr std::array\u0027?",
      "range": {
        "startLine": 137,
        "startChar": 0,
        "endLine": 137,
        "endChar": 48
      },
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c8a9be6_39a9ab75",
        "filename": "virtual-media.json",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "This seems kind of silly.  Can we DRY up this configuration?  You\u0027ve had to repeat yourself 4 times for a \"default\" configuration: Slot_0, /nbd/0, nbd0, nbd0.sock.",
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01dec557_29fae87f",
        "filename": "xyz.openbmc_project.VirtualMedia.service",
        "patchSetId": 1
      },
      "lineNbr": 6,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-24T13:41:28Z",
      "side": 1,
      "message": "We\u0027ve been moving a lot of executables we don\u0027t intend users to run into /usr/libexec.  See https://github.com/openbmc/docs/blob/master/anti-patterns.md#incorrect-placement-of-executables-in-sbin-usrsbin-or-bin-usrbin",
      "revId": "1c9a6f9bc9eb4d9cacfaa585f3135f816c1603d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}